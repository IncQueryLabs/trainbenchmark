# Specify the minimum and maximum sizes for the scalable models.
# The models are generated in sizes of powers of two,
# e.g. if min_size = 1 and max_size = 8, the generated model sizes are 1, 2, 4 and 8.
min_size: 1
max_size: 1

# Specify the options for the Java virtual machine. The options are copied to the "java" command invoking the JVM.
java_opts:
  - -Xms2G
  - -Xmx2G

# Number of runs for the same tool/scenario/query/size.
runs: 10

# Timeout for the benchmark processes.
timeout: 600

# Uncomment this if you would like to receive an email if the benchmark is finished.
#email:
#  address: trainbenchmark@gmail.com
#  password: 
#  host: smtp.gmail.com:587

# Specify the queries to run.
queries:
- ConnectedSegments
- PosLength
- RouteSensor
- SemaphoreNeighbor
- SwitchSensor
- SwitchSet

# Specify the scenarios for the benchmark and the generator.
# You may also specify the benchmark arguments for each scenario.
scenarios:
- Batch:
#- Inject:
#    transformationStrategy: fixed
#    transformationConstant: 10
#    iterationCount: 10
- Repair:
    transformationStrategy: proportional
    transformationConstant: 10
    iterationCount: 10

# Specify the name of the tools to run.
tools:
#- allegro
#- blazegraph
#- drools5
#- drools6
#- emfapi
- emfincquery
#- hawk
- iqdcore
#- jena
#- mysql
#- neo4j
#- sesame
#- virtuoso

# Optional arguments for the generator.
generator_optional_arguments:
  rdf:
  - metamodel

# Optional arguments for the benchmark.
# For example, the neo4j tool is invoked with and without the coreapi argument as well.
benchmark_optional_arguments:
  neo4j:
  - coreapi
  jena:
  - inferencing
  sesame:
  - inferencing
  emfincquery:
  - localsearch
  iqdcore:
  - - -checker
    - RemoteOnly
